An exception occurred while executing 'SELECT sourceTable.*, mm_employees.id AS mm_employees_id FROM tl_member sourceTable LEFT JOIN mm_employees modelTable ON sourceTable.id=mm_employees.tl_member WHERE mm_employees.id IN (?)' with params ["2"]:

SQLSTATE[42S22]: Column not found: 1054 Unknown column 'mm_employees.id' in 'field list'


    public function getDataFor($arrIds)
    {
        if (!$this->isProperlyConfigured()) {
            return array();
        }

        $strTableNameId = $this->getSelectSource();
        $strColNameId   = $this->getIdColumn();
        $arrReturn      = [];

        $strMetaModelTableName   = $this->getMetaModel()->getTableName();
        $strMetaModelTableNameId = $strMetaModelTableName.'_id';
/*
        // Using aliased join here to resolve issue #3 - SQL error for self referencing table.
        $query =  sprintf(
            'SELECT sourceTable.*, %2$s.id AS %3$s
            FROM %1$s sourceTable
            LEFT JOIN %2$s ON (sourceTable.%4$s=%2$s.%5$s)
            WHERE %2$s.id IN (?)',
            // @codingStandardsIgnoreStart - We want to keep the numbers as comment at the end of the following lines.
            $strTableNameId,              // 1
            $strMetaModelTableName,       // 2
            $strMetaModelTableNameId,     // 3
            $strColNameId,                // 4
            $this->getColName()           // 5
            // @codingStandardsIgnoreEnd
        );

        $statement = $this->connection->executeQuery(
            $query,
            [$arrIds],
            [Connection::PARAM_STR_ARRAY]
        );

        while ($row = $statement->fetch(\PDO::FETCH_ASSOC)) {
            $arrReturn[$row[$strMetaModelTableNameId]] = $row;
        }
*/
        $builder = $this->connection->createQueryBuilder()
            ->select('sourceTable.*')
            ->addselect($strMetaModelTableName.'.id AS '.$strMetaModelTableNameId)
            ->from($strTableNameId,'sourceTable')
            ->leftJoin('sourceTable', $strMetaModelTableName, 'modelTable',
                'sourceTable.'.$strColNameId.'='.$strMetaModelTableName.'.'.$this->getColName())
            ->where($strMetaModelTableName.'.id IN (:ids)')
            ->setParameter('ids', $arrIds, Connection::PARAM_STR_ARRAY)
            ->execute();

        foreach ($builder->fetch(\PDO::FETCH_ASSOC) as $row) {
            $arrReturn[$row[$strMetaModelTableNameId]] = $row;
        }

        return $arrReturn;
    }